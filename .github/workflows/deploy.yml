name: Build, Push to ECR, and Deploy to EC2
on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      PUBLIC_ECR_REPOSITORY_URI: public.ecr.aws/c4d3l3m6/thusecond
      IMAGE_TAG: latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Java environment
      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Step 3: Build Maven project
      - name: Build Maven Project
        run: |
          chmod +x mvnw
          ./mvnw -Pprod verify jib:dockerBuild -DskipTests -Dmaven.javadoc.skip=true -DskipITs -C

      # Step 4: Set up Docker
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      # Step 5: Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # Step 6: Log in to Amazon ECR
      - name: Log in to Amazon ECR Public
        run: |
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws
      # - name: Log in to Amazon ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v2

      # Step 6: Build and Push Docker Image to ECR
      - name: Build and Push Docker Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker tag thusecond public.ecr.aws/c4d3l3m6/thusecond:latest
          docker push public.ecr.aws/c4d3l3m6/thusecond:latest

  
  deploy-to-ec2:
    runs-on: ubuntu-latest
    needs: build-and-push
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      EC2_SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
      PUBLIC_ECR_REPOSITORY_URI: public.ecr.aws/c4d3l3m6/thusecond:latest
      ECR_REPOSITORY: thusecond
      IMAGE_TAG: latest

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3

      - name: SSH into EC2 and Deploy Docker Image
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/ec2-keypair.pem
          chmod 600 ~/.ssh/ec2-keypair.pem
          ssh-keyscan -H ${{ secrets.EC2_IP }} >> ~/.ssh/known_hosts
          ssh -i ~/.ssh/ec2-keypair.pem ubuntu@${{ secrets.EC2_IP }} <<EOF

            # Install and set up Docker
            sudo apt update
            sudo apt install -y docker.io
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker ubuntu
            newgrp docker

            # Install AWS CLI if missing
            if ! command -v aws &> /dev/null; then
              sudo apt install -y awscli
            fi

            # Install Docker Compose
            DOCKER_COMPOSE_VERSION="2.20.2"
            sudo rm -f /usr/local/bin/docker-compose
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            docker-compose --version

            # Authenticate to AWS ECR
            #export AWS_REGION=${{ env.AWS_REGION }}
            #aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 637423430820.dkr.ecr.us-east-1.amazonaws.com
            docker pull public.ecr.aws/c4d3l3m6/thusecond:latest

            # Pull the latest Docker image
            docker pull 637423430820.dkr.ecr.us-east-1.amazonaws.com/thusecond:latest

            # Clone repo only if it doesn't exist
            if [ -d "thusecond/.git" ]; then
              cd thusecond
              git pull origin main
            else
              git clone https://github.com/Acmf-api/thusecond
              cd thusecond
            fi

            # Deploy the updated Docker image
            docker-compose down
            docker-compose up -d --force-recreate
          EOF
